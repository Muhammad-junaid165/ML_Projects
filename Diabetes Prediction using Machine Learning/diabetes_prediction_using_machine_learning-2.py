# -*- coding: utf-8 -*-
"""Diabetes Prediction using Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kTo2j2y5-tA5o1nQkDpXrLfjLm5XitoW
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis"""

#Loading the diabetes dataset to Pandas Dataframe
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

#printing head of dataset
diabetes_dataset.head()

#number of rows and columns in dataset

diabetes_dataset.shape

#understanding the dataset

diabetes_dataset.describe()

#checking number of positive and negative diabetes 
diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

#separating data and labels
X = diabetes_dataset.drop(columns = 'Outcome' , axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Standardize Dataset"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data

print(X)

X_Train , X_Test , Y_Train , Y_Test = train_test_split(X , Y , test_size = 0.2 , stratify=Y , random_state = 2 )

print(X.shape, X_Train.shape, X_Test.shape)

"""Training Model"""

classifier = svm.SVC(kernel = 'linear')

#Training SVM classifier
classifier.fit(X_Train, Y_Train)

"""Model Evaluation"""

#Accuracy Score on Training data

X_Train_prediction = classifier.predict(X_Train)
training_data_accuracy = accuracy_score(X_Train_prediction, Y_Train)

print('Accuracy Score of Training Data : ' , training_data_accuracy)

#Accuracy Score on Test data

X_Test_prediction = classifier.predict(X_Test)
test_data_accuracy = accuracy_score(X_Test_prediction, Y_Test)

print('Accuracy Score of Test Data : ' , test_data_accuracy)

"""Predictive System"""

input_data = (1,97,66,15,140,23.2,0.487,22)

#Change input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if(prediction[0] == 0 ):
  print('The person is not Diabetic')
else:
  print('The person is Diabetic')

